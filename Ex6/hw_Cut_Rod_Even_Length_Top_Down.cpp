/*
    hw_Cut_Rod_Even_Length_Top_Down.cpp
    Cut Rods of Even Length only
    If a company decides to cut only rods of even size, given the length of the rod and price 
    of each size, modify your dynamic programming code (both top-down and bottom-up) to find 
    the maximum revenue that shall be generated. There is no penalty for wastage.

    Input Format
    First line contains the length of the rod, n
    Next line contains the price of rods of each length from 1 to n separated by a space

    Output Format
    Maximum revenue that may be generated by cutting rod into rods of even length
*/

#include <iostream>
#include <vector>
#include <climits>
#include <algorithm>
using namespace std;
int memoized_cut_rod_aux(vector <int> &p, int length, vector <int> &r);
int memoized_cut_rod(vector <int> &p, int length)
{    
    vector <int> r(100, 0);
    int i;
    for(i = 0; i < 100; i++)
        r[i] = INT_MIN;
    return memoized_cut_rod_aux(p, length, r);    
}
int memoized_cut_rod_aux(vector <int> &p, int length,vector <int> &r)
{
    if(length == 0) // these two lines were not there in the original code 
        return 0; // but have been added to prevent r[-1] from being checked
    int q;
    if(r[length - 1] >= 0)
        return(r[length - 1]);
    int l = length;
    if(length % 2 != 0)
        l = length - 1;
    if(l == 0)
        return 0;
    q = INT_MIN;
    for(int i = 1; i <= l; i++)
        q = max(q, p[i - 1] + memoized_cut_rod_aux(p, l - i, r));
    r[length - 1] = q;
    return q;
}
int main()
{
    int i, n, price, max_profit;
    cin >> n;
    vector<int> p(n);
    for(i = 0; i < n; i++)
        cin >> p[i];
    max_profit = memoized_cut_rod(p, n);
    cout << max_profit;
}

/*
Code that was submitted, above code is improved

#include<iostream>
using namespace std;
#include <vector>
#include <limits.h>
int memoized_cut_rod_aux(vector <int> &p, int length, vector <int> &r);
int maximum(int a, int b)
{    
    if(a > b)
        return a;
    return b;
}
int memoized_cut_rod(vector <int> &p, int length)
{    
    vector<int> r(100, 0);
    int i;
    for(i = 0; i < 100; i++)
        r[i] = INT_MIN;
    return memoized_cut_rod_aux(p, length, r);    
}
int memoized_cut_rod_aux(vector <int> &p, int length,vector <int> &r)
{
    int q;
    if(r[length - 1] >= 0)
        return(r[length - 1]);
    int l = length;
    if(length % 2 != 0)
        l = length - 1;
    if(length == 0)
        return 0;
    q = INT_MIN;
    for(int i = 1; i <= l; i++)
        q = maximum(q, p[i - 1] + memoized_cut_rod_aux(p, l - i, r));
    r[length - 1] = q;
    return q;
}
int main()
{
    vector <int> p;
    int i, n, price,max_profit;
    cin >> n;
    for(i = 0; i < n; i++)
    {
        cin >> price;
        p.push_back(price);
    }
    max_profit = memoized_cut_rod(p, n);
    cout << max_profit;
}

*/